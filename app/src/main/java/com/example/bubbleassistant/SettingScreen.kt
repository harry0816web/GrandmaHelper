package com.example.bubbleassistant

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ChatBubble
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Image
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material.icons.filled.KeyboardVoice
import androidx.compose.material.icons.filled.Tune
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.platform.LocalContext
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TextField
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.foundation.Image
import android.graphics.BitmapFactory
import androidx.compose.ui.graphics.asImageBitmap
import kotlinx.coroutines.launch
import androidx.compose.runtime.rememberCoroutineScope
import okhttp3.MultipartBody
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.File
import java.io.FileOutputStream
import android.provider.MediaStore
import android.content.ContentValues
import android.os.Build
import android.widget.Toast
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.text.font.FontWeight

@Composable
fun SettingsScreen(
    modifier: Modifier = Modifier,
    bubbleOn: Boolean,
    onBubbleToggle: (Boolean) -> Unit,
    voiceOn: Boolean,
    onVoiceToggle: (Boolean) -> Unit,
    onNavigateTutorial: () -> Unit,
    onNavigateFeatures: () -> Unit
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .background(Color(0xFFE2F4F3)) // 整體背景
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = buildAnnotatedString {
                withStyle(
                    style = SpanStyle(
                        brush = Brush.linearGradient(
                            colors = listOf(Color(0xFF42A09D), Color(0xFF6BC8C5))
                        ),
                        fontWeight = FontWeight.Bold,
                        shadow = Shadow(
                            color = Color(0xAA000000), // 更深的黑色陰影
                            offset = Offset(3f, 3f),   // 陰影位移加大
                            blurRadius = 6f            // 陰影更模糊明顯
                        )
                    )
                ) {
                    append("Grandma Helper")
                }
            },
            style = MaterialTheme.typography.headlineLarge
        )



        // Bubble Assistant 開關
        SettingItemRow(
            icon = Icons.Default.ChatBubble,
            title = "開啟詢問泡泡",
            checked = bubbleOn,
            onCheckedChange = onBubbleToggle
        )

        // 語音開關
        val context = LocalContext.current
        val ttsManager = remember { TextToSpeechManager.getInstance(context) }
        LaunchedEffect(voiceOn) {
            ttsManager.setVoiceEnabled(voiceOn)
        }
        SettingItemRow(
            icon = Icons.Default.KeyboardVoice,
            title = "開啟語音模式",
            checked = voiceOn,
            onCheckedChange = {
                onVoiceToggle(it)
                ttsManager.setVoiceEnabled(it)
            }
        )

        // 常用功能
        SettingNavRow(icon = Icons.Default.Tune, title = "常用詢問設定", onClick = onNavigateFeatures)

        // 使用教學
        SettingNavRow(icon = Icons.Default.Info, title = "App 使用教學", onClick = onNavigateTutorial)

        // --- 早安圖區域：把 state 提升到 if 外面，避免收合時被銷毀 ---
        var morningCardExpanded by remember { mutableStateOf(false) }

        var prompt by rememberSaveable { mutableStateOf("") }
        var resultBitmap by remember { mutableStateOf<android.graphics.Bitmap?>(null) }
        var isLoading by remember { mutableStateOf(false) }
        var errorMsg by remember { mutableStateOf<String?>(null) }
        var hasAutoGenerated by rememberSaveable { mutableStateOf(false) }
        val scope = rememberCoroutineScope()

        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                // 標題 Row
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable { morningCardExpanded = !morningCardExpanded }
                ) {
                    Icon(
                        imageVector = Icons.Default.Image,
                        contentDescription = "早安圖 Icon",
                        tint = Color(0xFF42A09D),
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "每日一張早安圖",
                        style = MaterialTheme.typography.titleMedium,
                        color = Color.Black,
                        modifier = Modifier.weight(1f)
                    )
                    Icon(
                        imageVector = if (morningCardExpanded) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                        contentDescription = if (morningCardExpanded) "收起" else "展開",
                        tint = Color(0xFF42A09D)
                    )
                }

                // 一進入app且沒有圖片時，才自動生成一張預設圖
                LaunchedEffect(Unit) {
                    if (resultBitmap == null && !hasAutoGenerated && !isLoading) {
                        isLoading = true
                        errorMsg = null
                        try {
                            val generated = generateMorningImage(context, "")
                            resultBitmap = generated
                        } catch (t: Throwable) {
                            errorMsg = t.message ?: "自動生成失敗"
                        } finally {
                            isLoading = false
                            hasAutoGenerated = true
                        }
                    }
                }

                if (morningCardExpanded) {
                    Spacer(modifier = Modifier.height(16.dp))

                    Column(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        // 結果顯示區（正方形、無叉叉）
                        Box(
                            modifier = Modifier
                                .size(200.dp) // 正方形
                                .background(Color(0xFFE2F4F3)),
                            contentAlignment = Alignment.Center
                        ) {
                            when {
                                resultBitmap != null -> {
                                    Image(
                                        bitmap = resultBitmap!!.asImageBitmap(),
                                        contentDescription = "生成結果"
                                    )
                                }
                                isLoading -> {
                                    CircularProgressIndicator()
                                }
                                //!errorMsg.isNullOrBlank() -> Text("錯誤：$errorMsg", color = Color.Red)
                                else -> {
                                    Text("請按生成取得早安圖", color = Color.Gray)
                                }
                            }
                        }

                        Spacer(modifier = Modifier.height(12.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            TextField(
                                value = prompt,
                                onValueChange = { prompt = it },
                                placeholder = { Text("想要哪種早安圖") },
                                singleLine = true,
                                modifier = Modifier
                                    .weight(1f)
                                    .heightIn(min = 56.dp),
                                colors = TextFieldDefaults.colors(
                                    focusedContainerColor = Color.White,
                                    unfocusedContainerColor = Color.White,
                                    focusedIndicatorColor = Color(0xFF42A09D),
                                    unfocusedIndicatorColor = Color.LightGray,
                                    cursorColor = Color(0xFF42A09D),
                                    focusedTextColor = Color.Black,
                                    unfocusedTextColor = Color.Black,
                                    focusedPlaceholderColor = Color.Gray,
                                    unfocusedPlaceholderColor = Color.Gray
                                )
                            )

                            Spacer(modifier = Modifier.width(8.dp))

                            Button(
                                enabled = !isLoading,
                                onClick = {
                                    errorMsg = null
                                    val userPrompt = prompt
                                    prompt = ""
                                    scope.launch {
                                        isLoading = true
                                        try {
                                            val generated = generateMorningImage(context, userPrompt)
                                            resultBitmap = generated
                                        } catch (t: Throwable) {
                                            errorMsg = t.message ?: "生成失敗"
                                        } finally {
                                            isLoading = false
                                        }
                                    }
                                },
                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A09D))
                            ) {
                                Text(if (isLoading) "生成中..." else "生成", color = Color.White)
                            }
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        // 另存圖片
                        Button(
                            enabled = resultBitmap != null && !isLoading,
                            onClick = {
                                val bmp = resultBitmap ?: return@Button
                                scope.launch {
                                    val ok = saveBitmapToGallery(
                                        context = context,
                                        bitmap = bmp,
                                        displayName = "morning_image_${System.currentTimeMillis()}.png"
                                    )
                                    Toast.makeText(
                                        context,
                                        if (ok) "已另存到相簿/Pictures/GrandmaHelper" else "儲存失敗",
                                        Toast.LENGTH_SHORT
                                    ).show()
                                }
                            },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A09D))
                        ) {
                            Text("另存圖片", color = Color.White)
                        }

                        if (!errorMsg.isNullOrBlank()) {
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(errorMsg!!, color = Color.Red)
                        }
                    }
                }
            }
        }
    }
}

/** 呼叫後端生成早安圖（僅送出 prompt；若空白則送預設字串） */
private suspend fun generateMorningImage(
    context: android.content.Context,
    prompt: String
): android.graphics.Bitmap = withContext(Dispatchers.IO) {
    val client = OkHttpClient.Builder()
        .connectTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
        .readTimeout(60, java.util.concurrent.TimeUnit.SECONDS)
        .writeTimeout(60, java.util.concurrent.TimeUnit.SECONDS)
        .retryOnConnectionFailure(true) // 避免短暫斷線
        .build()
    val multipart = MultipartBody.Builder().setType(MultipartBody.FORM)
        .addFormDataPart("prompt", if (prompt.isNotBlank()) prompt else "傳給我一張圖")
        .build()

    val request = Request.Builder()
        .url(GEMINI_IMAGE_API_URL)
        .post(multipart)
        .build()

    val bytes = client.newCall(request).execute().use { resp ->
        if (!resp.isSuccessful) throw IllegalStateException("HTTP ${resp.code}")
        resp.body?.bytes() ?: throw IllegalStateException("空回應")
    }

    val outFile = File(context.cacheDir, "morning_${System.currentTimeMillis()}.png")
    FileOutputStream(outFile).use { it.write(bytes) }

    BitmapFactory.decodeFile(outFile.absolutePath) ?: throw IllegalStateException("無法解析回傳圖片")
}

/** 儲存到相簿（保留） */
private suspend fun saveBitmapToGallery(
    context: android.content.Context,
    bitmap: android.graphics.Bitmap,
    displayName: String
): Boolean = withContext(Dispatchers.IO) {
    try {
        val collection = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY)
        } else {
            MediaStore.Images.Media.EXTERNAL_CONTENT_URI
        }
        val values = ContentValues().apply {
            put(MediaStore.Images.Media.DISPLAY_NAME, displayName)
            put(MediaStore.Images.Media.MIME_TYPE, "image/png")
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                put(MediaStore.Images.Media.RELATIVE_PATH, "Pictures/GrandmaHelper")
                put(MediaStore.Images.Media.IS_PENDING, 1)
            }
        }
        val resolver = context.contentResolver
        val uri = resolver.insert(collection, values) ?: return@withContext false
        resolver.openOutputStream(uri)?.use { out ->
            val ok = bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, out)
            if (!ok) return@withContext false
        } ?: return@withContext false
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            values.clear()
            values.put(MediaStore.Images.Media.IS_PENDING, 0)
            resolver.update(uri, values, null, null)
        }
        true
    } catch (_: Throwable) {
        false
    }
}

// API endpoint
private const val GEMINI_IMAGE_API_URL: String = "https://morning-image-api-855188038216.asia-east1.run.app/generate"

/** 可重複使用的設定開關項目 */
@Composable
fun SettingItemRow(
    icon: ImageVector,
    title: String,
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White, shape = MaterialTheme.shapes.medium)
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = null,
            tint = Color(0xFF42A09D),
            modifier = Modifier.size(24.dp)
        )

        Spacer(modifier = Modifier.width(12.dp))

        Text(
            text = title,
            color = Color.Black,
            modifier = Modifier.weight(1f)
        )

        Switch(
            checked = checked,
            onCheckedChange = onCheckedChange,
            colors = SwitchDefaults.colors(
                checkedThumbColor = Color.White,
                checkedTrackColor = Color(0xFF42A09D)
            )
        )
    }
}

/** 可點擊導覽的設定列 */
@Composable
fun SettingNavRow(
    icon: ImageVector,
    title: String,
    onClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .background(Color.White, shape = MaterialTheme.shapes.medium)
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = null,
            tint = Color(0xFF42A09D),
            modifier = Modifier.size(24.dp)
        )

        Spacer(modifier = Modifier.width(12.dp))

        Text(
            text = title,
            color = Color.Black,
            modifier = Modifier.weight(1f)
        )

        Icon(
            imageVector = Icons.Default.KeyboardArrowRight,
            contentDescription = null,
            tint = Color(0xFF42A09D)
        )
    }
}
