package com.example.bubbleassistant

import android.content.ContentValues
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Build
import android.provider.MediaStore
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Image
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.*
import okhttp3.MultipartBody
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.File
import java.io.FileOutputStream
import androidx.compose.runtime.saveable.rememberSaveable

@Composable
fun MorningCard() {
    val context = LocalContext.current
    var expanded by remember { mutableStateOf(false) }
    var prompt by rememberSaveable { mutableStateOf("") }
    var resultBitmap by remember { mutableStateOf<Bitmap?>(null) }
    var isLoading by remember { mutableStateOf(false) }
    var errorMsg by remember { mutableStateOf<String?>(null) }
    var hasAutoGenerated by rememberSaveable { mutableStateOf(false) }
    val scope = rememberCoroutineScope()

    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White)
    ) {
        Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
            // 標題 Row
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { expanded = !expanded }
            ) {
                Icon(
                    imageVector = Icons.Default.Image,
                    contentDescription = "早安圖 Icon",
                    tint = Color(0xFF42A09D),
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    "每日一張早安圖",
                    style = MaterialTheme.typography.titleMedium,
                    color = Color.Black,
                    modifier = Modifier.weight(1f)
                )
                Icon(
                    imageVector = if (expanded) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                    contentDescription = if (expanded) "收起" else "展開",
                    tint = Color(0xFF42A09D)
                )
            }

            // 一進入app且沒有圖片時，才自動生成一張預設圖
            LaunchedEffect(Unit) {
                if (resultBitmap == null && !hasAutoGenerated && !isLoading) {
                    isLoading = true
                    errorMsg = null
                    try {
                        val generated = generateMorningImage(context, "")
                        resultBitmap = generated
                    } catch (t: Throwable) {
                        errorMsg = t.message ?: "自動生成失敗"
                    } finally {
                        isLoading = false
                        hasAutoGenerated = true
                    }
                }
            }

            if (expanded) {
                Spacer(modifier = Modifier.height(16.dp))

                Column(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    // 結果顯示區（正方形）
                    Box(
                        modifier = Modifier
                            .size(200.dp)
                            .background(Color(0xFFE2F4F3)),
                        contentAlignment = Alignment.Center
                    ) {
                        when {
                            resultBitmap != null -> {
                                Image(
                                    bitmap = resultBitmap!!.asImageBitmap(),
                                    contentDescription = "生成結果"
                                )
                            }
                            isLoading -> {
                                CircularProgressIndicator()
                            }
                            else -> {
                                Text("請按生成取得早安圖", color = Color.Gray)
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        TextField(
                            value = prompt,
                            onValueChange = { prompt = it },
                            placeholder = { Text("想要哪種早安圖") },
                            singleLine = true,
                            modifier = Modifier.weight(1f).heightIn(min = 56.dp),
                            colors = TextFieldDefaults.colors(
                                focusedContainerColor = Color(0xFFE2F4F3),
                                unfocusedContainerColor = Color(0xFFE2F4F3)
                            )
                        )

                        Spacer(modifier = Modifier.width(8.dp))

                        Button(
                            enabled = !isLoading,
                            onClick = {
                                errorMsg = null
                                val userPrompt = prompt
                                prompt = ""
                                scope.launch {
                                    isLoading = true
                                    try {
                                        val generated = generateMorningImage(context, userPrompt)
                                        resultBitmap = generated
                                    } catch (t: Throwable) {
                                        errorMsg = t.message ?: "生成失敗"
                                    } finally {
                                        isLoading = false
                                    }
                                }
                            },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A09D))
                        ) {
                            Text(if (isLoading) "生成中..." else "生成", color = Color.White)
                        }
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    // 另存圖片
                    Button(
                        enabled = resultBitmap != null && !isLoading,
                        onClick = {
                            val bmp = resultBitmap ?: return@Button
                            scope.launch {
                                val ok = saveBitmapToGallery(
                                    context = context,
                                    bitmap = bmp,
                                    displayName = "morning_image_${System.currentTimeMillis()}.png"
                                )
                                Toast.makeText(
                                    context,
                                    if (ok) "已另存到相簿/Pictures/GrandmaHelper" else "儲存失敗",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A09D))
                    ) {
                        Text("另存圖片", color = Color.White)
                    }

                    if (!errorMsg.isNullOrBlank()) {
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(errorMsg!!, color = Color.Red)
                    }
                }
            }
        }
    }
}

// --- API + 儲存功能 (保留原始) ---
private suspend fun generateMorningImage(
    context: android.content.Context,
    prompt: String
): Bitmap = withContext(Dispatchers.IO) {
    val client = OkHttpClient.Builder()
        .connectTimeout(30, java.util.concurrent.TimeUnit.SECONDS)
        .readTimeout(60, java.util.concurrent.TimeUnit.SECONDS)
        .writeTimeout(60, java.util.concurrent.TimeUnit.SECONDS)
        .retryOnConnectionFailure(true)
        .build()

    val multipart = MultipartBody.Builder().setType(MultipartBody.FORM)
        .addFormDataPart("prompt", if (prompt.isNotBlank()) prompt else "傳給我一張圖")
        .build()

    val request = Request.Builder()
        .url(GEMINI_IMAGE_API_URL)
        .post(multipart)
        .build()

    val bytes = client.newCall(request).execute().use { resp ->
        if (!resp.isSuccessful) throw IllegalStateException("HTTP ${resp.code}")
        resp.body?.bytes() ?: throw IllegalStateException("空回應")
    }

    val outFile = File(context.cacheDir, "morning_${System.currentTimeMillis()}.png")
    FileOutputStream(outFile).use { it.write(bytes) }

    BitmapFactory.decodeFile(outFile.absolutePath) ?: throw IllegalStateException("無法解析回傳圖片")
}

private suspend fun saveBitmapToGallery(
    context: android.content.Context,
    bitmap: Bitmap,
    displayName: String
): Boolean = withContext(Dispatchers.IO) {
    try {
        val collection = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY)
        } else {
            MediaStore.Images.Media.EXTERNAL_CONTENT_URI
        }
        val values = ContentValues().apply {
            put(MediaStore.Images.Media.DISPLAY_NAME, displayName)
            put(MediaStore.Images.Media.MIME_TYPE, "image/png")
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                put(MediaStore.Images.Media.RELATIVE_PATH, "Pictures/GrandmaHelper")
                put(MediaStore.Images.Media.IS_PENDING, 1)
            }
        }
        val resolver = context.contentResolver
        val uri = resolver.insert(collection, values) ?: return@withContext false
        resolver.openOutputStream(uri)?.use { out ->
            val ok = bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)
            if (!ok) return@withContext false
        } ?: return@withContext false
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            values.clear()
            values.put(MediaStore.Images.Media.IS_PENDING, 0)
            resolver.update(uri, values, null, null)
        }
        true
    } catch (_: Throwable) {
        false
    }
}

private const val GEMINI_IMAGE_API_URL =
    "https://morning-image-api-855188038216.asia-east1.run.app/generate"
